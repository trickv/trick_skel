snmp-ifstatus() {
    trick_skel_snmp $1 .1.3.6.1.2.1.31.1.1
}

snmp-uptime() {
    trick_skel_snmp $1 .1.3.6.1.2.1.1.3.0
}

snmp-switchportstatus() {
    trick_skel_snmp $1 interfaces.ifTable.ifEntry.ifOperStatus
}

snmp-switchportdescription() {
    trick_skel_snmp $1 interfaces.ifTable.ifEntry.ifDescr
}

snmp-nice-switchport-display() {
    IFS=$'\n'
    for port in `trick_skel_snmp $1 interfaces.ifTable.ifEntry.ifIndex`; do
        index=`echo $port | awk '{print $4}'`
        echo -n "$index  "
        echo -n `trick_skel_snmp $1 interfaces.ifTable.ifEntry.ifDescr.$index | awk '{print $4}'`
        echo -n ":  "
        echo -n `trick_skel_snmp $1 interfaces.ifTable.ifEntry.ifOperStatus.$index | awk '{print $4}'`
        echo -n " - "
        echo -n `trick_skel_snmp $1 IF-MIB::ifAlias.$index | cut -d\  -f4-`
        echo
    done
}

snmp-full-switch-status() {
    trick_skel_snmp $1 interfaces.ifTable.ifEntry
}

snmp-sysdesc() {
    set -e
    for cur in sysDescr sysObjectID sysUpTime sysContact sysName sysLocation sysServices; do
        trick_skel_snmp $1 SNMPv2-MIB::$cur
        if [ $? -ne 0 ]; then
            break
        fi
    done
    set +e
}

snmp-set-host() {
    if [ "$1" == "" ]; then
        echo "You must specify a host."
        return
    fi
    trick_skel_snmp_host=$1
    echo "SNMP host seet to $1"
}

snmp-walk() {
    if [ "$trick_skel_snmp_host" == "" ]; then
        echo "You must set a host first with snmp-set-host"
        return
    fi
    snmpwalk -v2c -c public $trick_skel_snmp_host $1
}


trick_skel_snmp() {
    snmpwalk -v2c -c public $*
}

snmp-ping() {
    trick_skel_snmp $1 SNMPv2-MIB::sysUpTime
    if [ $? -ne 0 ]; then
        echo "SNMP uptime query failed. Make sure this host is accepting connections from this IP, and that the community is public."
    fi
}

# vim:ft=sh
