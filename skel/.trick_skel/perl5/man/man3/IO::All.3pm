.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "IO::All 3pm"
.TH IO::All 3pm "2008-12-12" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
IO::All \- IO::All of it to Graham and Damian!
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use IO::All;                                # Let the madness begin...
\&
\&    # Some of the many ways to read a whole file into a scalar
\&    io(\*(Aqfile.txt\*(Aq) > $contents;                 # Overloaded "arrow"
\&    $contents < io \*(Aqfile.txt\*(Aq;                  # Flipped but same operation
\&    $io = io \*(Aqfile.txt\*(Aq;                        # Create a new IO::All object
\&    $contents = $$io;                           # Overloaded scalar dereference
\&    $contents = $io\->all;                       # A method to read everything
\&    $contents = $io\->slurp;                     # Another method for that
\&    $contents = join \*(Aq\*(Aq, $io\->getlines;         # Join the separate lines
\&    $contents = join \*(Aq\*(Aq, map "$_\en", @$io;      # Same. Overloaded array deref
\&    $io\->tie;                                   # Tie the object as a handle
\&    $contents = join \*(Aq\*(Aq, <$io>;                 # And use it in builtins
\&    # and the list goes on ...
\&
\&    # Other file operations:
\&    @lines = io(\*(Aqfile.txt\*(Aq)\->slurp;             # List context slurp
\&    $content > io(\*(Aqfile.txt\*(Aq);                  # Print to a file
\&    io(\*(Aqfile.txt\*(Aq)\->print($content, $more);     # (ditto)
\&    $content >> io(\*(Aqfile.txt\*(Aq);                 # Append to a file
\&    io(\*(Aqfile.txt\*(Aq)\->append($content);           # (ditto)
\&    $content << $io;                            # Append to a string
\&    io(\*(Aqcopy.txt\*(Aq) < io(\*(Aqfile.txt\*(Aq);            $ Copy a file
\&    io(\*(Aqfile.txt\*(Aq) > io(\*(Aqcopy.txt\*(Aq);            # Invokes File::Copy
\&    io(\*(Aqmore.txt\*(Aq) >> io(\*(Aqall.txt\*(Aq);            # Add on to a file
\&
\&    # UTF\-8 Support
\&    $contents = io(\*(Aqfile.txt\*(Aq)\->utf8\->all;      # Turn on utf8
\&    use IO::All \-utf8;                          # Turn on utf8 for all io
\&    $contents = io(\*(Aqfile.txt\*(Aq)\->all;            #   by default in this package.
\&
\&    # General Encoding Support
\&    $contents = io(\*(Aqfile.txt\*(Aq)\->encoding(\*(Aqbig5\*(Aq)\->all;
\&    use IO::All \-encoding => \*(Aqbig5\*(Aq;            # Turn on big5 for all io
\&    $contents = io(\*(Aqfile.txt\*(Aq)\->all;            #   by default in this package.
\&
\&    # Print the path name of a file:
\&    print $io\->name;                            # The direct method
\&    print "$io";                                # Object stringifies to name
\&    print $io;                                  # Quotes not needed here
\&    print $io\->filename;                        # The file portion only
\&
\&    # Read all the files/directories in a directory:
\&    $io = io(\*(Aqmy/directory/\*(Aq);                  # Create new directory object
\&    @contents = $io\->all;                       # Get all contents of dir
\&    @contents = @$io;                           # Directory as an array
\&    @contents = values %$io;                    # Directory as a hash
\&    push @contents, $subdir                     # One at a time
\&      while $subdir = $io\->next;
\&
\&    # Print the name and file type for all the contents above:
\&    print "$_ is a " . $_\->type . "\en"          # Each element of @contents
\&      for @contents;                            # is an IO::All object!!
\&
\&    # Print first line of each file:
\&    print $_\->getline                           # getline gets one line
\&      for io(\*(Aqdir\*(Aq)\->all_files;                 # Files only
\&
\&    # Print names of all files/dirs three directories deep:
\&    print "$_\en" for $io\->all(3);               # Pass in the depth. Default=1
\&
\&    # Print names of all files/dirs recursively:
\&    print "$_\en" for $io\->all(0);               # Zero means all the way down
\&    print "$_\en" for $io\->All;                  # Capitalized shortcut
\&    print "$_\en" for $io\->deep\->all;            # Another way
\&
\&    # There are some special file names:
\&    print io(\*(Aq\-\*(Aq);                              # Print STDIN to STDOUT
\&    io(\*(Aq\-\*(Aq) > io(\*(Aq\-\*(Aq);                          # Do it again
\&    io(\*(Aq\-\*(Aq) < io(\*(Aq\-\*(Aq);                          # Same. Context sensitive.
\&    "Bad puppy" > io(\*(Aq=\*(Aq);                      # Message to STDERR
\&    $string_file = io(\*(Aq$\*(Aq);                     # Create IO::String Object
\&    $temp_file = io(\*(Aq?\*(Aq);                       # Create a temporary file
\&
\&    # Socket operations:
\&    $server = io(\*(Aqlocalhost:5555\*(Aq)\->fork;       # Create a daemon socket
\&    $connection = $server\->accept;              # Get a connection socket
\&    $input < $connection;                       # Get some data from it
\&    "Thank you!" > $connection;                 # Thank the caller
\&    $connection\->close;                         # Hang up
\&    io(\*(Aq:6666\*(Aq)\->accept\->slurp > io\->devnull;   # Take a complaint and file it
\&    
\&    # DBM database operations:
\&    $dbm = io \*(Aqmy/database\*(Aq;                    # Create a database object
\&    print $dbm\->{grocery_list};                 # Hash context makes it a DBM
\&    $dbm\->{todo} = $new_list;                   # Write to database
\&    $dbm\->dbm(\*(AqGDBM_file\*(Aq);                     # Demand specific DBM
\&    io(\*(Aqmydb\*(Aq)\->mldbm\->{env} = \e%ENV;           # MLDBM support
\&
\&    # Tie::File support:
\&    $io = io \*(Aqfile.txt\*(Aq;
\&    $io\->[42] = \*(AqLine Forty Three\*(Aq;             # Change a line
\&    print $io\->[@$io / 2];                      # Print middle line
\&    @$io = reverse @$io;                        # Reverse lines in a file
\&
\&    # Stat functions:
\&    printf "%s %s %s\en",                        # Print name, uid and size of 
\&      $_\->name, $_\->uid, $_\->size               # contents of current directory
\&        for io(\*(Aq.\*(Aq)\->all;
\&    print "$_\en" for sort                       # Use mtime method to sort all
\&      {$b\->mtime <=> $a\->mtime}                 # files under current directory
\&        io(\*(Aq.\*(Aq)\->All_Files;                     # by recent modification time.
\&
\&    # File::Spec support:
\&    $contents < io\->catfile(qw(dir file.txt));  # Portable IO operation
\&    
\&    # Miscellaneous:
\&    @lines = io(\*(Aqfile.txt\*(Aq)\->chomp\->slurp;      # Chomp as you slurp
\&    @chunks = 
\&      io(\*(Aqfile.txt\*(Aq)\->separator(\*(Aqxxx\*(Aq)\->slurp;  # Use alternnate record sep
\&    $binary = io(\*(Aqfile.bin\*(Aq)\->binary\->all;      # Read a binary file
\&    io(\*(Aqa\-symlink\*(Aq)\->readlink\->slurp;           # Readlink returns an object
\&    print io(\*(Aqfoo\*(Aq)\->absolute\->pathname;        # Print absolute path of foo
\&
\&    # IO::All External Plugin Methods
\&    io("myfile") > io\->("ftp://store.org");     # Upload a file using ftp
\&    $html < io\->http("www.google.com");         # Grab a web page
\&    io(\*(Aqmailto:worst@enemy.net\*(Aq)\->print($spam); # Email a "friend"
\&
\&    # This is just the beginning, read on...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\*(L"Graham Barr for doing it all. Damian Conway for doing it all different.\*(R"
.PP
IO::All combines all of the best Perl \s-1IO\s0 modules into a single nifty
object oriented interface to greatly simplify your everyday Perl \s-1IO\s0
idioms. It exports a single function called \f(CW\*(C`io\*(C'\fR, which returns a new
IO::All object. And that object can do it all!
.PP
The IO::All object is a proxy for IO::File, IO::Dir, IO::Socket,
IO::String, Tie::File, File::Spec, File::Path and File::ReadBackwards;
as well as all the \s-1DBM\s0 and \s-1MLDBM\s0 modules. You can use most of the
methods found in these classes and in IO::Handle (which they inherit
from). IO::All adds dozens of other helpful idiomatic methods
including file stat and manipulation functions.
.PP
IO::All is pluggable, and modules like IO::All::LWP and IO::All::Mailto
add even more functionality. Optionally, every IO::All object can be
tied to itself. This means that you can use most perl \s-1IO\s0 builtins on it:
readline, <>, getc, print, printf, syswrite, sysread, close.
.PP
The distinguishing magic of IO::All is that it will automatically open
(and close) files, directories, sockets and other \s-1IO\s0 things for you. You
never need to specify the mode ('<', '>>', etc), since it is determined
by the usage context. That means you can replace this:
.PP
.Vb 5
\&    open STUFF, \*(Aq<\*(Aq, \*(Aq./mystuff\*(Aq
\&      or die "Can\*(Aqt open \*(Aq./mystuff\*(Aq for input:\en$!";
\&    local $/;
\&    my $stuff = <STUFF>;
\&    close STUFF;
.Ve
.PP
with this:
.PP
.Vb 1
\&    my $stuff < io"./mystuff";
.Ve
.PP
And that is a \fBgood thing\fR!
.SH "USAGE"
.IX Header "USAGE"
Normally just say:
.PP
.Vb 1
\&    use IO::All;
.Ve
.PP
and IO::All will export a single function called \f(CW\*(C`io\*(C'\fR, which contructs all \s-1IO\s0
objects.
.PP
You can also pass global flags like this:
.PP
.Vb 1
\&    use IO::All \-strict \-encoding => \*(Aqbig5\*(Aq, \-foobar;
.Ve
.PP
Which automatically makes those method calls on every new \s-1IO\s0 object. In other
words this:
.PP
.Vb 1
\&    my $io = io(\*(Aqlalala.txt\*(Aq);
.Ve
.PP
becomes this:
.PP
.Vb 1
\&    my $io = io(\*(Aqlalala.txt\*(Aq)\->strict\->encoding(\*(Aqbig5\*(Aq)\->foobar;
.Ve
.SH "METHOD ROLE CALL"
.IX Header "METHOD ROLE CALL"
Here is an alphabetical list of all the public methods that you can call
on an IO::All object.
.PP
\&\f(CW\*(C`abs2rel\*(C'\fR, \f(CW\*(C`absolute\*(C'\fR, \f(CW\*(C`accept\*(C'\fR, \f(CW\*(C`All\*(C'\fR, \f(CW\*(C`all\*(C'\fR, \f(CW\*(C`All_Dirs\*(C'\fR,
\&\f(CW\*(C`all_dirs\*(C'\fR, \f(CW\*(C`All_Files\*(C'\fR, \f(CW\*(C`all_files\*(C'\fR, \f(CW\*(C`All_Links\*(C'\fR, \f(CW\*(C`all_links\*(C'\fR,
\&\f(CW\*(C`append\*(C'\fR, \f(CW\*(C`appendf\*(C'\fR, \f(CW\*(C`appendln\*(C'\fR, \f(CW\*(C`assert\*(C'\fR, \f(CW\*(C`atime\*(C'\fR, \f(CW\*(C`autoclose\*(C'\fR,
\&\f(CW\*(C`autoflush\*(C'\fR, \f(CW\*(C`backwards\*(C'\fR, \f(CW\*(C`bcc\*(C'\fR, \f(CW\*(C`binary\*(C'\fR, \f(CW\*(C`binmode\*(C'\fR, \f(CW\*(C`blksize\*(C'\fR,
\&\f(CW\*(C`blocks\*(C'\fR, \f(CW\*(C`block_size\*(C'\fR, \f(CW\*(C`buffer\*(C'\fR, \f(CW\*(C`canonpath\*(C'\fR, \f(CW\*(C`case_tolerant\*(C'\fR,
\&\f(CW\*(C`catdir\*(C'\fR, \f(CW\*(C`catfile\*(C'\fR, \f(CW\*(C`catpath\*(C'\fR, \f(CW\*(C`cc\*(C'\fR, \f(CW\*(C`chdir\*(C'\fR, \f(CW\*(C`chomp\*(C'\fR, \f(CW\*(C`clear\*(C'\fR,
\&\f(CW\*(C`close\*(C'\fR, \f(CW\*(C`confess\*(C'\fR, \f(CW\*(C`content\*(C'\fR, \f(CW\*(C`ctime\*(C'\fR, \f(CW\*(C`curdir\*(C'\fR, \f(CW\*(C`dbm\*(C'\fR, \f(CW\*(C`deep\*(C'\fR,
\&\f(CW\*(C`device\*(C'\fR, \f(CW\*(C`device_id\*(C'\fR, \f(CW\*(C`devnull\*(C'\fR, \f(CW\*(C`dir\*(C'\fR, \f(CW\*(C`domain\*(C'\fR, \f(CW\*(C`empty\*(C'\fR,
\&\f(CW\*(C`encoding\*(C'\fR, \f(CW\*(C`eof\*(C'\fR, \f(CW\*(C`errors\*(C'\fR, \f(CW\*(C`file\*(C'\fR, \f(CW\*(C`filename\*(C'\fR, \f(CW\*(C`fileno\*(C'\fR,
\&\f(CW\*(C`filepath\*(C'\fR, \f(CW\*(C`filter\*(C'\fR, \f(CW\*(C`fork\*(C'\fR, \f(CW\*(C`from\*(C'\fR, \f(CW\*(C`ftp\*(C'\fR, \f(CW\*(C`get\*(C'\fR, \f(CW\*(C`getc\*(C'\fR,
\&\f(CW\*(C`getline\*(C'\fR, \f(CW\*(C`getlines\*(C'\fR, \f(CW\*(C`gid\*(C'\fR, \f(CW\*(C`handle\*(C'\fR, \f(CW\*(C`head\*(C'\fR, \f(CW\*(C`http\*(C'\fR, \f(CW\*(C`https\*(C'\fR,
\&\f(CW\*(C`inode\*(C'\fR, \f(CW\*(C`io_handle\*(C'\fR, \f(CW\*(C`is_absolute\*(C'\fR, \f(CW\*(C`is_dir\*(C'\fR, \f(CW\*(C`is_dbm\*(C'\fR,
\&\f(CW\*(C`is_executable\*(C'\fR, \f(CW\*(C`is_file\*(C'\fR, \f(CW\*(C`is_link\*(C'\fR, \f(CW\*(C`is_mldbm\*(C'\fR, \f(CW\*(C`is_open\*(C'\fR,
\&\f(CW\*(C`is_pipe\*(C'\fR, \f(CW\*(C`is_readable\*(C'\fR, \f(CW\*(C`is_socket\*(C'\fR, \f(CW\*(C`is_stdio\*(C'\fR, \f(CW\*(C`is_string\*(C'\fR,
\&\f(CW\*(C`is_temp\*(C'\fR, \f(CW\*(C`is_writable\*(C'\fR, \f(CW\*(C`join\*(C'\fR, \f(CW\*(C`length\*(C'\fR, \f(CW\*(C`link\*(C'\fR, \f(CW\*(C`lock\*(C'\fR,
\&\f(CW\*(C`mailer\*(C'\fR, \f(CW\*(C`mailto\*(C'\fR, \f(CW\*(C`mkdir\*(C'\fR, \f(CW\*(C`mkpath\*(C'\fR, \f(CW\*(C`mldbm\*(C'\fR, \f(CW\*(C`mode\*(C'\fR, \f(CW\*(C`modes\*(C'\fR,
\&\f(CW\*(C`mtime\*(C'\fR, \f(CW\*(C`name\*(C'\fR, \f(CW\*(C`new\*(C'\fR, \f(CW\*(C`next\*(C'\fR, \f(CW\*(C`nlink\*(C'\fR, \f(CW\*(C`open\*(C'\fR, \f(CW\*(C`password\*(C'\fR,
\&\f(CW\*(C`path\*(C'\fR, \f(CW\*(C`pathname\*(C'\fR, \f(CW\*(C`perms\*(C'\fR, \f(CW\*(C`pipe\*(C'\fR, \f(CW\*(C`port\*(C'\fR, \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`printf\*(C'\fR,
\&\f(CW\*(C`println\*(C'\fR, \f(CW\*(C`put\*(C'\fR, \f(CW\*(C`rdonly\*(C'\fR, \f(CW\*(C`rdwr\*(C'\fR, \f(CW\*(C`read\*(C'\fR, \f(CW\*(C`readdir\*(C'\fR,
\&\f(CW\*(C`readlink\*(C'\fR, \f(CW\*(C`recv\*(C'\fR, \f(CW\*(C`rel2abs\*(C'\fR, \f(CW\*(C`relative\*(C'\fR, \f(CW\*(C`rename\*(C'\fR, \f(CW\*(C`request\*(C'\fR,
\&\f(CW\*(C`response\*(C'\fR, \f(CW\*(C`rmdir\*(C'\fR, \f(CW\*(C`rmtree\*(C'\fR, \f(CW\*(C`rootdir\*(C'\fR, \f(CW\*(C`scalar\*(C'\fR, \f(CW\*(C`seek\*(C'\fR,
\&\f(CW\*(C`send\*(C'\fR, \f(CW\*(C`separator\*(C'\fR, \f(CW\*(C`shutdown\*(C'\fR, \f(CW\*(C`size\*(C'\fR, \f(CW\*(C`slurp\*(C'\fR, \f(CW\*(C`socket\*(C'\fR,
\&\f(CW\*(C`sort\*(C'\fR, \f(CW\*(C`splitdir\*(C'\fR, \f(CW\*(C`splitpath\*(C'\fR, \f(CW\*(C`stat\*(C'\fR, \f(CW\*(C`stdio\*(C'\fR, \f(CW\*(C`stderr\*(C'\fR,
\&\f(CW\*(C`stdin\*(C'\fR, \f(CW\*(C`stdout\*(C'\fR, \f(CW\*(C`strict\*(C'\fR, \f(CW\*(C`string\*(C'\fR, \f(CW\*(C`string_ref\*(C'\fR, \f(CW\*(C`subject\*(C'\fR,
\&\f(CW\*(C`sysread\*(C'\fR, \f(CW\*(C`syswrite\*(C'\fR, \f(CW\*(C`tail\*(C'\fR, \f(CW\*(C`tell\*(C'\fR, \f(CW\*(C`temp\*(C'\fR, \f(CW\*(C`tie\*(C'\fR, \f(CW\*(C`tmpdir\*(C'\fR,
\&\f(CW\*(C`to\*(C'\fR, \f(CW\*(C`touch\*(C'\fR, \f(CW\*(C`truncate\*(C'\fR, \f(CW\*(C`type\*(C'\fR, \f(CW\*(C`user\*(C'\fR, \f(CW\*(C`uid\*(C'\fR, \f(CW\*(C`unlink\*(C'\fR,
\&\f(CW\*(C`unlock\*(C'\fR, \f(CW\*(C`updir\*(C'\fR, \f(CW\*(C`uri\*(C'\fR, \f(CW\*(C`utf8\*(C'\fR, \f(CW\*(C`utime\*(C'\fR and \f(CW\*(C`write\*(C'\fR.
.PP
Each method is documented further below.
.SH "OPERATOR OVERLOADING"
.IX Header "OPERATOR OVERLOADING"
IO::All objects overload a small set of Perl operators to great effect.
The overloads are limited to <, <<, >, >>, dereferencing operations, and
stringification.
.PP
Even though relatively few operations are overloaded, there is actually
a huge matrix of possibilities for magic. That's because the overloading
is sensitive to the types, position and context of the arguments, and an
IO::All object can be one of many types.
.PP
The most important overload to grok is stringification. IO::All objects
stringify to their file or directory name. Here we print the contents of
the current directory:
.PP
.Vb 1
\&    perl \-MIO::All \-le \*(Aqprint for io(".")\->all\*(Aq
.Ve
.PP
is the same as:
.PP
.Vb 1
\&    perl \-MIO::All \-le \*(Aqprint $_\->name for io(".")\->all\*(Aq
.Ve
.PP
Stringification is important because it allows IO::All operations to return
objects when they might otherwise return file names. Then the recipient can
use the result either as an object or a string.
.PP
\&'>' and '<' move data between objects in the direction pointed to by the
operator.
.PP
.Vb 6
\&    $content1 < io(\*(Aqfile1\*(Aq);
\&    $content1 > io(\*(Aqfile2\*(Aq);
\&    io(\*(Aqfile2\*(Aq) > $content3;
\&    io(\*(Aqfile3\*(Aq) < $content3;
\&    io(\*(Aqfile3\*(Aq) > io(\*(Aqfile4\*(Aq);
\&    io(\*(Aqfile5\*(Aq) < io(\*(Aqfile4\*(Aq);
.Ve
.PP
\&'>>' and '<<' do the same thing except the recipent string or file is
appended to.
.PP
An IO::All file used as an array reference becomes tied using Tie::File:
.PP
.Vb 5
\&    $file = io"file";
\&    # Print last line of file
\&    print $file\->[\-1];
\&    # Insert new line in middle of file
\&    $file\->[$#$file / 2] = \*(AqNew line\*(Aq;
.Ve
.PP
An IO::All file used as a hash reference becomes tied to a \s-1DBM\s0 class:
.PP
.Vb 1
\&    io(\*(Aqmydbm\*(Aq)\->{ingy} = \*(AqYAML\*(Aq;
.Ve
.PP
An IO::All directory used as an array reference, will expose each file or
subdirectory as an element of the array.
.PP
.Vb 1
\&    print "$_\en" for @{io \*(Aqdir\*(Aq};
.Ve
.PP
IO::All directories used as hash references have file names as keys, and
IO::All objects as values:
.PP
.Vb 1
\&    print io(\*(Aqdir\*(Aq)\->{\*(Aqfoo.txt\*(Aq}\->slurp;
.Ve
.PP
Files used as scalar references get slurped:
.PP
.Vb 1
\&    print ${io(\*(Aqdir\*(Aq)\->{\*(Aqfoo.txt\*(Aq}};
.Ve
.PP
Not all combinations of operations and object types are supported. Some
just haven't been added yet, and some just don't make sense. If you use
an invalid combination, an error will be thrown.
.SH "COOKBOOK"
.IX Header "COOKBOOK"
This section describes some various things that you can easily cook up
with IO::All.
.SS "File Locking"
.IX Subsection "File Locking"
IO::All makes it very easy to lock files. Just use the \f(CW\*(C`lock\*(C'\fR method. Here's a
standalone program that demonstrates locking for both write and read:
.PP
.Vb 3
\&    use IO::All;
\&    my $io1 = io(\*(Aqmyfile\*(Aq)\->lock;
\&    $io1\->println(\*(Aqline 1\*(Aq);
\&
\&    fork or do {
\&        my $io2 = io(\*(Aqmyfile\*(Aq)\->lock;
\&        print $io2\->slurp;
\&        exit;
\&    };
\&
\&    sleep 1;
\&    $io1\->println(\*(Aqline 2\*(Aq);
\&    $io1\->println(\*(Aqline 3\*(Aq);
\&    $io1\->unlock;
.Ve
.PP
There are a lot of subtle things going on here. An exclusive lock is
issued for \f(CW$io1\fR on the first \f(CW\*(C`println\*(C'\fR. That's because the file
isn't actually opened until the first \s-1IO\s0 operation.
.PP
When the child process tries to read the file using \f(CW$io2\fR, there is
a shared lock put on it. Since \f(CW$io1\fR has the exclusive lock, the
slurp blocks.
.PP
The parent process sleeps just to make sure the child process gets a
chance. The parent needs to call \f(CW\*(C`unlock\*(C'\fR or \f(CW\*(C`close\*(C'\fR to release the
lock. If all goes well the child will print 3 lines.
.SS "Round Robin"
.IX Subsection "Round Robin"
This simple example will read lines from a file forever. When the last
line is read, it will reopen the file and read the first one again.
.PP
.Vb 5
\&    my $io = io\*(Aqfile1.txt\*(Aq;
\&    $io\->autoclose(1);
\&    while (my $line = $io\->getline || $io\->getline) {
\&        print $line;
\&    }
.Ve
.SS "Reading Backwards"
.IX Subsection "Reading Backwards"
If you call the \f(CW\*(C`backwards\*(C'\fR method on an IO::All object, the
\&\f(CW\*(C`getline\*(C'\fR and \f(CW\*(C`getlines\*(C'\fR will work in reverse. They will read the
lines in the file from the end to the beginning.
.PP
.Vb 6
\&    my @reversed;
\&    my $io = io(\*(Aqfile1.txt\*(Aq);
\&    $io\->backwards;
\&    while (my $line = $io\->getline) {
\&        push @reversed, $line;
\&    }
.Ve
.PP
or more simply:
.PP
.Vb 1
\&    my @reversed = io(\*(Aqfile1.txt\*(Aq)\->backwards\->getlines;
.Ve
.PP
The \f(CW\*(C`backwards\*(C'\fR method returns the IO::All object so that you can
chain the calls.
.PP
\&\s-1NOTE:\s0 This operation requires that you have the File::ReadBackwards 
module installed.
.SS "Client/Server Sockets"
.IX Subsection "Client/Server Sockets"
IO::All makes it really easy to write a forking socket server and a
client to talk to it.
.PP
In this example, a server will return 3 lines of text, to every client
that calls it. Here is the server code:
.PP
.Vb 1
\&    use IO::All;
\&
\&    my $socket = io(\*(Aq:12345\*(Aq)\->fork\->accept;
\&    $socket\->print($_) while <DATA>;
\&    $socket\->close;
\&
\&    _\|_DATA_\|_
\&    On your mark,
\&    Get set,
\&    Go!
.Ve
.PP
Here is the client code:
.PP
.Vb 1
\&    use IO::All;
\&
\&    my $io = io(\*(Aqlocalhost:12345\*(Aq);
\&    print while $_ = $io\->getline;
.Ve
.PP
You can run the server once, and then run the client repeatedly (in
another terminal window). It should print the 3 data lines each time.
.PP
Note that it is important to close the socket if the server is forking,
or else the socket won't go out of scope and close.
.SS "A Tiny Web Server"
.IX Subsection "A Tiny Web Server"
Here is how you could write a simplistic web server that works with static and
dynamic pages:
.PP
.Vb 1
\&    perl \-MIO::All \-e \*(Aqio(":8080")\->fork\->accept\->(sub { $_[0] < io(\-x $1 ? "./$1 |" : $1) if /^GET \e/(.*) / })\*(Aq
.Ve
.PP
There is are a lot of subtle things going on here. First we accept a socket
and fork the server. Then we overload the new socket as a code ref. This code
ref takes one argument, another code ref, which is used as a callback.
.PP
The callback is called once for every line read on the socket. The line
is put into \f(CW$_\fR and the socket itself is passed in to the callback.
.PP
Our callback is scanning the line in \f(CW$_\fR for an \s-1HTTP\s0 \s-1GET\s0 request. If one is
found it parses the file name into \f(CW$1\fR. Then we use \f(CW$1\fR to create an new
IO::All file object... with a twist. If the file is executable (\f(CW\*(C`\-x\*(C'\fR), then
we create a piped command as our IO::All object. This somewhat approximates
\&\s-1CGI\s0 support.
.PP
Whatever the resulting object is, we direct the contents back at our socket
which is in \f(CW$_[0]\fR. Pretty simple, eh?
.SS "\s-1DBM\s0 Files"
.IX Subsection "DBM Files"
IO::All file objects used as a hash reference, treat the file as a \s-1DBM\s0 tied to
a hash. Here I write my \s-1DB\s0 record to \s-1STDERR:\s0
.PP
.Vb 1
\&    io("names.db")\->{ingy} > io\*(Aq=\*(Aq;
.Ve
.PP
Since their are several \s-1DBM\s0 formats available in Perl, IO::All picks the first
one of these that is installed on your system:
.PP
.Vb 1
\&    DB_File GDBM_File NDBM_File ODBM_File SDBM_File
.Ve
.PP
You can override which \s-1DBM\s0 you want for each IO::All object:
.PP
.Vb 1
\&    my @keys = keys %{io(\*(Aqmydbm\*(Aq)\->dbm(\*(AqSDBM_File\*(Aq)};
.Ve
.SS "File Subclassing"
.IX Subsection "File Subclassing"
Subclassing is easy with IO::All. Just create a new module and use
IO::All as the base class, like this:
.PP
.Vb 2
\&    package NewModule;
\&    use IO::All \-base;
.Ve
.PP
You need to do it this way so that IO::All will export the \f(CW\*(C`io\*(C'\fR function.
Here is a simple recipe for subclassing:
.PP
IO::Dumper inherits everything from IO::All and adds an extra method
called \f(CW\*(C`dump\*(C'\fR, which will dump a data structure to the file we
specify in the \f(CW\*(C`io\*(C'\fR function. Since it needs Data::Dumper to do the
dumping, we override the \f(CW\*(C`open\*(C'\fR method to \f(CW\*(C`require Data::Dumper\*(C'\fR and
then pass control to the real \f(CW\*(C`open\*(C'\fR.
.PP
First the code using the module:
.PP
.Vb 1
\&    use IO::Dumper;
\&    
\&    io(\*(Aq./mydump\*(Aq)\->dump($hash);
.Ve
.PP
And next the IO::Dumper module itself:
.PP
.Vb 3
\&    package IO::Dumper;
\&    use IO::All \-base;
\&    use Data::Dumper;
\&    
\&    sub dump {
\&        my $self = shift;
\&        Dumper(@_) > $self;
\&    }
\&    
\&    1;
.Ve
.SS "Inline Subclassing"
.IX Subsection "Inline Subclassing"
This recipe does the same thing as the previous one, but without needing
to write a separate module. The only real difference is the first line.
Since you don't \*(L"use\*(R" IO::Dumper, you need to still call its \f(CW\*(C`import\*(C'\fR
method manually.
.PP
.Vb 2
\&    IO::Dumper\->import;
\&    io(\*(Aq./mydump\*(Aq)\->dump($hash);
\&    
\&    package IO::Dumper;
\&    use IO::All \-base;
\&    use Data::Dumper;
\&    
\&    sub dump {
\&        my $self = shift;
\&        Dumper(@_) > $self;
\&    }
.Ve
.SH "THE IO::All METHODS"
.IX Header "THE IO::All METHODS"
This section gives a full description of all of the methods that you can
call on IO::All objects. The methods have been grouped into subsections
based on object construction, option settings, configuration, action
methods and support for specific modules.
.SS "Object Construction and Initialization Methods"
.IX Subsection "Object Construction and Initialization Methods"
.IP "\(bu" 4
new
.Sp
There are three ways to create a new IO::All object. The first is with
the special function \f(CW\*(C`io\*(C'\fR which really just calls \f(CW\*(C`IO::All\->new\*(C'\fR.
The second is by calling \f(CW\*(C`new\*(C'\fR as a class method. The third is calling
\&\f(CW\*(C`new\*(C'\fR as an object instance method. In this final case, the new objects
attributes are copied from the instance object.
.Sp
.Vb 3
\&    io(file\-descriptor);
\&    IO::All\->new(file\-descriptor);
\&    $io\->new(file\-descriptor);
.Ve
.Sp
All three forms take a single argument, a file descriptor. A file
descriptor can be any of the following:
.Sp
.Vb 10
\&    \- A file name
\&    \- A file handle
\&    \- A directory name
\&    \- A directory handle
\&    \- A typeglob reference
\&    \- A piped shell command. eq \*(Aq| ls \-al\*(Aq
\&    \- A socket domain/port.  eg \*(Aqperl.com:5678\*(Aq
\&    \- \*(Aq\-\*(Aq means STDIN or STDOUT (depending on usage)
\&    \- \*(Aq=\*(Aq means STDERR
\&    \- \*(Aq$\*(Aq means an IO::String object
\&    \- \*(Aq?\*(Aq means a temporary file
\&    \- A URI including: http, https, ftp and mailto
\&    \- An IO::All object
.Ve
.Sp
If you provide an IO::All object, you will simply get that \fIsame
object\fR returned from the constructor.
.Sp
If no file descriptor is provided, an object will still be created, but
it must be defined by one of the following methods before it can be used
for I/O:
.IP "\(bu" 4
file
.Sp
.Vb 1
\&    io\->file(file\-name);
.Ve
.Sp
Using the \f(CW\*(C`file\*(C'\fR method sets the type of the object to \fIfile\fR and sets
the pathname of the file if provided.
.Sp
It might be important to use this method if you had a file whose name
was \f(CW\*(Aq\-\*(Aq\fR, or if the name might otherwise be confused with a
directory or a socket. In this case, either of these statements would
work the same:
.Sp
.Vb 2
\&    my $file = io(\*(Aq\-\*(Aq)\->file;
\&    my $file = io\->file(\*(Aq\-\*(Aq);
.Ve
.IP "\(bu" 4
dir
.Sp
.Vb 1
\&    io\->file(dir\-name);
.Ve
.Sp
Make the object be of type \fIdirectory\fR.
.IP "\(bu" 4
socket
.Sp
.Vb 1
\&    io\->file(domain:port);
.Ve
.Sp
Make the object be of type \fIsocket\fR.
.IP "\(bu" 4
link
.Sp
.Vb 1
\&    io\->file(link\-name);
.Ve
.Sp
Make the object be of type \fIlink\fR.
.IP "\(bu" 4
pipe
.Sp
.Vb 1
\&    io\->file(link\-name);
.Ve
.Sp
Make the object be of type \fIpipe\fR. The following two statements are
equivalent:
.Sp
.Vb 3
\&    my $io = io(\*(Aqls \-l |\*(Aq);
\&    my $io = io(\*(Aqls \-l\*(Aq)\->pipe;
\&    my $io = io\->pipe(\*(Aqls \-l\*(Aq);
.Ve
.IP "\(bu" 4
dbm
.Sp
This method takes the names of zero or more \s-1DBM\s0 modules. The first one
that is available is used to process the dbm file.
.Sp
.Vb 1
\&    io(\*(Aqmydbm\*(Aq)\->dbm(\*(AqNDBM_File\*(Aq, \*(AqSDBM_File\*(Aq)\->{author} = \*(Aqingy\*(Aq;
.Ve
.Sp
If no module names are provided, the first available of the
following is used:
.Sp
.Vb 1
\&    DB_File GDBM_File NDBM_File ODBM_File SDBM_File
.Ve
.IP "\(bu" 4
mldbm
.Sp
Similar to the \f(CW\*(C`dbm\*(C'\fR method, except create a Multi Level \s-1DBM\s0 object
using the \s-1MLDBM\s0 module.
.Sp
This method takes the names of zero or more \s-1DBM\s0 modules and an optional
serialization module. The first \s-1DBM\s0 module that is available is used to
process the \s-1MLDBM\s0 file. The serialization module can be Data::Dumper,
Storable or FreezeThaw.
.Sp
.Vb 2
\&    io(\*(Aqmymldbm\*(Aq)\->mldbm(\*(AqGDBM_File\*(Aq, \*(AqStorable\*(Aq)\->{author} = 
\&      {nickname => \*(Aqingy\*(Aq};
.Ve
.IP "\(bu" 4
string
.Sp
Make the object be a IO::String object. These are equivalent:
.Sp
.Vb 2
\&    my $io = io(\*(Aq$\*(Aq);
\&    my $io = io\->string;
.Ve
.IP "\(bu" 4
temp
.Sp
Make the object represent a temporary file. It will automatically be
open for both read and write.
.IP "\(bu" 4
stdio
.Sp
Make the object represent either \s-1STDIN\s0 or \s-1STDOUT\s0 depending on how it is
used subsequently. These are equivalent:
.Sp
.Vb 2
\&    my $io = io(\*(Aq\-\*(Aq);
\&    my $io = io\->stdin;
.Ve
.IP "\(bu" 4
stdin
.Sp
Make the object represent \s-1STDIN\s0.
.IP "\(bu" 4
stdout
.Sp
Make the object represent \s-1STDOUT\s0.
.IP "\(bu" 4
stderr
.Sp
Make the object represent \s-1STDERR\s0.
.IP "\(bu" 4
handle
.Sp
.Vb 1
\&    io\->handle(io\-handle);
.Ve
.Sp
Forces the object to be created from an pre-existing \s-1IO\s0 handle. You can
chain calls together to indicate the type of handle:
.Sp
.Vb 2
\&    my $file_object = io\->file\->handle($file_handle);
\&    my $dir_object = io\->dir\->handle($dir_handle);
.Ve
.IP "\(bu" 4
http
.Sp
Make the object represent an http uri. Requires IO-All-LWP.
.IP "\(bu" 4
https
.Sp
Make the object represent an https uri. Requires IO-All-LWP.
.IP "\(bu" 4
ftp
.Sp
Make the object represent a ftp uri. Requires IO-All-LWP.
.IP "\(bu" 4
mailto
.Sp
Make the object represent a mailto uri. Requires IO-All-Mailto.
.PP
If you need to use the same options to create a lot of objects, and
don't want to duplicate the code, just create a dummy object with the
options you want, and use that object to spawn other objects.
.PP
.Vb 4
\&    my $lt = io\->lock\->tie;
\&    ...
\&    my $io1 = $lt\->new(\*(Aqfile1\*(Aq);
\&    my $io2 = $lt\->new(\*(Aqfile2\*(Aq);
.Ve
.PP
Since the new method copies attributes from the calling object, both
\&\f(CW$io1\fR and \f(CW$io2\fR will be locked and tied.
.SS "Option Setting Methods"
.IX Subsection "Option Setting Methods"
The following methods don't do any actual I/O, but they specify options
about how the I/O should be done.
.PP
Each option can take a single argument of 0 or 1. If no argument is
given, the value 1 is assumed. Passing 0 turns the option off.
.PP
All of these options return the object reference that was used to
invoke them. This is so that the option methods can be chained
together. For example:
.PP
.Vb 1
\&    my $io = io(\*(Aqpath/file\*(Aq)\->tie\->assert\->chomp\->lock;
.Ve
.IP "\(bu" 4
absolute
.Sp
Indicates that the \f(CW\*(C`pathname\*(C'\fR for the object should be made absolute.
.IP "\(bu" 4
assert
.Sp
This method ensures that the path for a file or directory actually exists
before the file is open. If the path does not exist, it is created.
.IP "\(bu" 4
autoclose
.Sp
By default, IO::All will close an object opened for input when \s-1EOF\s0 is
reached. By closing the handle early, one can immediately do other
operations on the object without first having to close it.
.Sp
This option is on by default, so if you don't want this behaviour, say
so like this:
.Sp
.Vb 1
\&    $io\->autoclose(0);
.Ve
.Sp
The object will then be closed when \f(CW$io\fR goes out of scope, or you
manually call \f(CW\*(C`$io\->close\*(C'\fR.
.IP "\(bu" 4
autoflush
.Sp
Proxy for IO::Handle::autoflush
.IP "\(bu" 4
backwards
.Sp
Sets the object to 'backwards' mode. All subsequent \f(CW\*(C`getline\*(C'\fR
operations will read backwards from the end of the file.
.Sp
Requires the File::ReadBackwards \s-1CPAN\s0 module.
.IP "\(bu" 4
binary
.Sp
Indicates the file has binary content and should be opened with
\&\f(CW\*(C`binmode\*(C'\fR.
.IP "\(bu" 4
chdir
.Sp
\&\fIchdir()\fR to the pathname of a directory object. When object goes out of
scope, chdir back to starting directory.
.IP "\(bu" 4
chomp
.Sp
Indicates that all operations that read lines should chomp the lines. If
the \f(CW\*(C`separator\*(C'\fR method has been called, chomp will remove that value
from the end of each record.
.IP "\(bu" 4
confess
.Sp
Errors should be reported with the very detailed Carp::confess function.
.IP "\(bu" 4
deep
.Sp
Indicates that calls to the \f(CW\*(C`all\*(C'\fR family of methods should search
directories as deep as possible.
.IP "\(bu" 4
fork
.Sp
Indicates that the process should automatically be forked inside the
\&\f(CW\*(C`accept\*(C'\fR socket method.
.IP "\(bu" 4
lock
.Sp
Indicate that operations on an object should be locked using flock.
.IP "\(bu" 4
rdonly
.Sp
This option indicates that certain operations like \s-1DBM\s0 and Tie::File
access should be done in read-only mode.
.IP "\(bu" 4
rdwr
.Sp
This option indicates that \s-1DBM\s0 and \s-1MLDBM\s0 files should be opened in read\-
write mode.
.IP "\(bu" 4
relative
.Sp
Indicates that the \f(CW\*(C`pathname\*(C'\fR for the object should be made relative.
.IP "\(bu" 4
sort
.Sp
Indicates whether objects returned from one of the \f(CW\*(C`all\*(C'\fR methods will
be in sorted order by name. True by default.
.IP "\(bu" 4
strict
.Sp
Check the return codes of every single system call. To turn this on for all
calls in your module, use:
.Sp
.Vb 1
\&    use IO::All \-strict;
.Ve
.IP "\(bu" 4
tie
.Sp
Indicate that the object should be tied to itself, thus allowing it to
be used as a filehandle in any of Perl's builtin \s-1IO\s0 operations.
.Sp
.Vb 2
\&    my $io = io(\*(Aqfoo\*(Aq)\->tie;
\&    @lines = <$io>;
.Ve
.IP "\(bu" 4
utf8
.Sp
Indicates that \s-1IO\s0 should be done using utf8 encoding. Calls binmode with
\&\f(CW\*(C`:utf8\*(C'\fR layer.
.SS "Configuration Methods"
.IX Subsection "Configuration Methods"
The following methods don't do any actual I/O, but they set specific
values to configure the IO::All object.
.PP
If these methods are passed no argument, they will return their
current value. If arguments are passed they will be used to set the
current value, and the object reference will be returned for potential
method chaining.
.IP "\(bu" 4
bcc
.Sp
Set the Bcc field for a mailto object.
.IP "\(bu" 4
binmode
.Sp
Proxy for binmode. Requires a layer to be passed. Use \f(CW\*(C`binary\*(C'\fR for
plain binary mode.
.IP "\(bu" 4
block_size
.Sp
The default length to be used for \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`sysread\*(C'\fR calls.
Defaults to 1024.
.IP "\(bu" 4
buffer
.Sp
Returns a reference to the internal buffer, which is a scalar. You can
use this method to set the buffer to a scalar of your choice. (You can
just pass in the scalar, rather than a reference to it.)
.Sp
This is the buffer that \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`write\*(C'\fR will use by default.
.Sp
You can easily have IO::All objects use the same buffer:
.Sp
.Vb 5
\&    my $input = io(\*(Aqabc\*(Aq);
\&    my $output = io(\*(Aqxyz\*(Aq);
\&    my $buffer;
\&    $output\->buffer($input\->buffer($buffer));
\&    $output\->write while $input\->read;
.Ve
.IP "\(bu" 4
cc
.Sp
Set the Cc field for a mailto object.
.IP "\(bu" 4
content
.Sp
Get or set the content for an \s-1LWP\s0 operation manually.
.IP "\(bu" 4
domain
.Sp
Set the domain name or ip address that a socket should use.
.IP "\(bu" 4
encoding
.Sp
Set the encoding to be used for the PerlIO layer.
.IP "\(bu" 4
errors
.Sp
Use this to set a subroutine reference that gets called when an internal
error is thrown.
.IP "\(bu" 4
filter
.Sp
Use this to set a subroutine reference that will be used to grep
which objects get returned on a call to one of the \f(CW\*(C`all\*(C'\fR methods.
For example:
.Sp
.Vb 1
\&    my @odd = io\->curdir\->filter(sub {$_\->size % 2})\->All_Files;
.Ve
.Sp
\&\f(CW@odd\fR will contain all the files under the current directory whose
size is an odd number of bytes.
.IP "\(bu" 4
from
.Sp
Indicate the sender for a mailto object.
.IP "\(bu" 4
mailer
.Sp
Set the mailer program for a mailto transaction. Defaults to 'sendmail'.
.IP "\(bu" 4
mode
.Sp
Set the mode for which the file should be opened. Examples:
.Sp
.Vb 2
\&    $io\->mode(\*(Aq>>\*(Aq)\->open;
\&    $io\->mode(O_RDONLY);
.Ve
.IP "\(bu" 4
name
.Sp
Set or get the name of the file or directory represented by the IO::All
object.
.IP "\(bu" 4
password
.Sp
Set the password for an \s-1LWP\s0 transaction.
.IP "\(bu" 4
perms
.Sp
Sets the permissions to be used if the file/directory needs to be created.
.IP "\(bu" 4
port
.Sp
Set the port number that a socket should use.
.IP "\(bu" 4
request
.Sp
Manually specify the request object for an \s-1LWP\s0 transaction.
.IP "\(bu" 4
response
.Sp
Returns the resulting reponse object from an \s-1LWP\s0 transaction.
.IP "\(bu" 4
separator
.Sp
Sets the record (line) separator to whatever value you pass it. Default
is \en. Affects the chomp setting too.
.IP "\(bu" 4
string_ref
.Sp
Proxy for IO::String::string_ref
.Sp
Returns a reference to the internal string that is acting like a file.
.IP "\(bu" 4
subject
.Sp
Set the subject for a mailto transaction.
.IP "\(bu" 4
to
.Sp
Set the recipient address for a mailto request.
.IP "\(bu" 4
uri
.Sp
Direct access to the \s-1URI\s0 used in \s-1LWP\s0 transactions.
.IP "\(bu" 4
user
.Sp
Set the user name for an \s-1LWP\s0 transaction.
.SS "\s-1IO\s0 Action Methods"
.IX Subsection "IO Action Methods"
These are the methods that actually perform I/O operations on an IO::All
object. The stat methods and the File::Spec methods are documented in
separate sections below.
.IP "\(bu" 4
accept
.Sp
For sockets. Opens a server socket (\s-1LISTEN\s0 => 1, \s-1REUSE\s0 => 1). Returns an
IO::All socket object that you are listening on.
.Sp
If the \f(CW\*(C`fork\*(C'\fR method was called on the object, the process will
automatically be forked for every connection.
.IP "\(bu" 4
all
.Sp
Read all contents into a single string.
.Sp
.Vb 1
\&    compare(io(\*(Aqfile1\*(Aq)\->all, io(\*(Aqfile2\*(Aq)\->all);
.Ve
.IP "\(bu" 4
all (For directories)
.Sp
Returns a list of IO::All objects for all files and subdirectories in a
directory.
.Sp
\&'.' and '..' are excluded.
.Sp
Takes an optional argument telling how many directories deep to search. The
default is 1. Zero (0) means search as deep as possible.
.Sp
The filter method can be used to limit the results.
.Sp
The items returned are sorted by name unless \f(CW\*(C`\->sort(0)\*(C'\fR is used.
.IP "\(bu" 4
All
.Sp
Same as \f(CWall(0)\fR.
.IP "\(bu" 4
all_dirs
.Sp
Same as \f(CW\*(C`all\*(C'\fR, but only return directories.
.IP "\(bu" 4
All_Dirs
.Sp
Same as \f(CWall_dirs(0)\fR.
.IP "\(bu" 4
all_files
.Sp
Same as \f(CW\*(C`all\*(C'\fR, but only return files.
.IP "\(bu" 4
All_Files
.Sp
Same as \f(CWall_files(0)\fR.
.IP "\(bu" 4
all_links
.Sp
Same as \f(CW\*(C`all\*(C'\fR, but only return links.
.IP "\(bu" 4
All_Links
.Sp
Same as \f(CWall_links(0)\fR.
.IP "\(bu" 4
append
.Sp
Same as print, but sets the file mode to '>>'.
.IP "\(bu" 4
appendf
.Sp
Same as printf, but sets the file mode to '>>'.
.IP "\(bu" 4
appendln
.Sp
Same as println, but sets the file mode to '>>'.
.IP "\(bu" 4
clear
.Sp
Clear the internal buffer. This method is called by \f(CW\*(C`write\*(C'\fR after it
writes the buffer. Returns the object reference for chaining.
.IP "\(bu" 4
close
.Sp
Close will basically unopen the object, which has different meanings for
different objects. For files and directories it will close and release
the handle. For sockets it calls shutdown. For tied things it unties
them, and it unlocks locked things.
.IP "\(bu" 4
empty
.Sp
Returns true if a file exists but has no size, or if a directory exists but
has no contents.
.IP "\(bu" 4
eof
.Sp
Proxy for IO::Handle::eof
.IP "\(bu" 4
exists
.Sp
Returns whether or not the file or directory exists.
.IP "\(bu" 4
filename
.Sp
Return the name portion of the file path in the object. For example:
.Sp
.Vb 1
\&    io(\*(Aqmy/path/file.txt\*(Aq)\->filename;
.Ve
.Sp
would return \f(CW\*(C`file.txt\*(C'\fR.
.IP "\(bu" 4
fileno
.Sp
Proxy for IO::Handle::fileno
.IP "\(bu" 4
filepath
.Sp
Return the path portion of the file path in the object. For example:
.Sp
.Vb 1
\&    io(\*(Aqmy/path/file.txt\*(Aq)\->filename;
.Ve
.Sp
would return \f(CW\*(C`my/path\*(C'\fR.
.IP "\(bu" 4
get
.Sp
Perform an \s-1LWP\s0 \s-1GET\s0 request manually.
.IP "\(bu" 4
getc
.Sp
Proxy for IO::Handle::getc
.IP "\(bu" 4
getline
.Sp
Calls IO::File::getline. You can pass in an optional record separator.
.IP "\(bu" 4
getlines
.Sp
Calls IO::File::getlines. You can pass in an optional record separator.
.IP "\(bu" 4
head
.Sp
Return the first 10 lines of a file. Takes an optional argument which is the
number of lines to return. Works as expected in list and scalar context. Is
subject to the current line separator.
.IP "\(bu" 4
io_handle
.Sp
Direct access to the actual IO::Handle object being used on an opened
IO::All object.
.IP "\(bu" 4
is_dir
.Sp
Returns boolean telling whether or not the IO::All object represents
a directory.
.IP "\(bu" 4
is_executable
.Sp
Returns true if file or directory is executable.
.IP "\(bu" 4
is_dbm
.Sp
Returns boolean telling whether or not the IO::All object
represents a dbm file.
.IP "\(bu" 4
is_file
.Sp
Returns boolean telling whether or not the IO::All object
represents a file.
.IP "\(bu" 4
is_link
.Sp
Returns boolean telling whether or not the IO::All object represents
a symlink.
.IP "\(bu" 4
is_mldbm
.Sp
Returns boolean telling whether or not the IO::All object
represents a mldbm file.
.IP "\(bu" 4
is_open
.Sp
Indicates whether the IO::All is currently open for input/output.
.IP "\(bu" 4
is_pipe
.Sp
Returns boolean telling whether or not the IO::All object represents
a pipe operation.
.IP "\(bu" 4
is_readable
.Sp
Returns true if file or directory is readable.
.IP "\(bu" 4
is_socket
.Sp
Returns boolean telling whether or not the IO::All object represents
a socket.
.IP "\(bu" 4
is_stdio
.Sp
Returns boolean telling whether or not the IO::All object represents
a \s-1STDIO\s0 file handle.
.IP "\(bu" 4
is_string
.Sp
Returns boolean telling whether or not the IO::All object represents
an IO::String object.
.IP "\(bu" 4
is_temp
.Sp
Returns boolean telling whether or not the IO::All object represents
a temporary file.
.IP "\(bu" 4
is_writable
.Sp
Returns true if file or directory is writable.  Can also be spelled as
\&\f(CW\*(C`is_writeable\*(C'\fR.
.IP "\(bu" 4
length
.Sp
Return the length of the internal buffer.
.IP "\(bu" 4
mkdir
.Sp
Create the directory represented by the object.
.IP "\(bu" 4
mkpath
.Sp
Create the directory represented by the object, when the path contains
more than one directory that doesn't exist. Proxy for File::Path::mkpath.
.IP "\(bu" 4
next
.Sp
For a directory, this will return a new IO::All object for each file
or subdirectory in the directory. Return undef on \s-1EOD\s0.
.IP "\(bu" 4
open
.Sp
Open the IO::All object. Takes two optional arguments \f(CW\*(C`mode\*(C'\fR and
\&\f(CW\*(C`perms\*(C'\fR, which can also be set ahead of time using the \f(CW\*(C`mode\*(C'\fR and
\&\f(CW\*(C`perms\*(C'\fR methods.
.Sp
\&\s-1NOTE:\s0 Normally you won't need to call open (or mode/perms), since this
happens automatically for most operations.
.IP "\(bu" 4
pathname
.Sp
Return the absolute or relative pathname for a file or directory, depending on
whether object is in \f(CW\*(C`absolute\*(C'\fR or \f(CW\*(C`relative\*(C'\fR mode.
.IP "\(bu" 4
print
.Sp
Proxy for IO::Handle::print
.IP "\(bu" 4
printf
.Sp
Proxy for IO::Handle::printf
.IP "\(bu" 4
println
.Sp
Same as print, but adds newline to each argument unless it already
ends with one.
.IP "\(bu" 4
put
.Sp
Perform an \s-1LWP\s0 \s-1PUT\s0 request manually.
.IP "\(bu" 4
read
.Sp
This method varies depending on its context. Read carefully (no pun
intended).
.Sp
For a file, this will proxy IO::File::read. This means you must pass
it a buffer, a length to read, and optionally a buffer offset for where
to put the data that is read. The function returns the length actually
read (which is zero at \s-1EOF\s0).
.Sp
If you don't pass any arguments for a file, IO::All will use its own
internal buffer, a default length, and the offset will always point at
the end of the buffer. The buffer can be accessed with the \f(CW\*(C`buffer\*(C'\fR
method. The length can be set with the \f(CW\*(C`block_size\*(C'\fR method. The default
length is 1024 bytes. The \f(CW\*(C`clear\*(C'\fR method can be called to clear
the buffer.
.Sp
For a directory, this will proxy IO::Dir::read.
.IP "\(bu" 4
readdir
.Sp
Similar to the Perl \f(CW\*(C`readdir\*(C'\fR builtin. In scalar context, return the next
directory entry (ie file or directory name), or undef on end of directory. In
list context, return all directory entries.
.Sp
Note that \f(CW\*(C`readdir\*(C'\fR does not return the special \f(CW\*(C`.\*(C'\fR and \f(CW\*(C`..\*(C'\fR entries.
.IP "\(bu" 4
readline
.Sp
Same as \f(CW\*(C`getline\*(C'\fR.
.IP "\(bu" 4
readlink
.Sp
Calls Perl's readlink function on the link represented by the object.
Instead of returning the file path, it returns a new IO::All object
using the file path.
.IP "\(bu" 4
recv
.Sp
Proxy for IO::Socket::recv
.IP "\(bu" 4
rename
.Sp
.Vb 1
\&    my $new = $io\->rename(\*(Aqnew\-name\*(Aq);
.Ve
.Sp
Calls Perl's rename function and returns an IO::All object for the
renamed file. Returns false if the rename failed.
.IP "\(bu" 4
rewind
.Sp
Proxy for IO::Dir::rewind
.IP "\(bu" 4
rmdir
.Sp
Delete the directory represented by the IO::All object.
.IP "\(bu" 4
rmtree
.Sp
Delete the directory represented by the IO::All object and all the files
and directories beneath it. Proxy for File::Path::rmtree.
.IP "\(bu" 4
scalar
.Sp
Deprecated. Same as \f(CW\*(C`all()\*(C'\fR.
.IP "\(bu" 4
seek
.Sp
Proxy for IO::Handle::seek. If you use seek on an unopened file, it will
be opened for both read and write.
.IP "\(bu" 4
send
.Sp
Proxy for IO::Socket::send
.IP "\(bu" 4
shutdown
.Sp
Proxy for IO::Socket::shutdown
.IP "\(bu" 4
slurp
.Sp
Read all file content in one operation. Returns the file content
as a string. In list context returns every line in the file.
.IP "\(bu" 4
stat
.Sp
Proxy for IO::Handle::stat
.IP "\(bu" 4
sysread
.Sp
Proxy for IO::Handle::sysread
.IP "\(bu" 4
syswrite
.Sp
Proxy for IO::Handle::syswrite
.IP "\(bu" 4
tail
.Sp
Return the last 10 lines of a file. Takes an optional argument which is the
number of lines to return. Works as expected in list and scalar context. Is
subject to the current line separator.
.IP "\(bu" 4
tell
.Sp
Proxy for IO::Handle::tell
.IP "\(bu" 4
throw
.Sp
This is an internal method that gets called whenever there is an error.
It could be useful to override it in a subclass, to provide more control
in error handling.
.IP "\(bu" 4
touch
.Sp
Update the atime and mtime values for a file or directory. Creates an empty
file if the file does not exist.
.IP "\(bu" 4
truncate
.Sp
Proxy for IO::Handle::truncate
.IP "\(bu" 4
type
.Sp
Returns a string indicated the type of io object. Possible values are:
.Sp
.Vb 6
\&    file
\&    dir
\&    link
\&    socket
\&    string
\&    pipe
.Ve
.Sp
Returns undef if type is not determinable.
.IP "\(bu" 4
unlink
.Sp
Unlink (delete) the file represented by the IO::All object.
.Sp
\&\s-1NOTE:\s0 You can unlink a file after it is open, and continue using it
until it is closed.
.IP "\(bu" 4
unlock
.Sp
Release a lock from an object that used the \f(CW\*(C`lock\*(C'\fR method.
.IP "\(bu" 4
utime
.Sp
Proxy for the utime Perl function.
.IP "\(bu" 4
write
.Sp
Opposite of \f(CW\*(C`read\*(C'\fR for file operations only.
.Sp
\&\s-1NOTE:\s0 When used with the automatic internal buffer, \f(CW\*(C`write\*(C'\fR will
clear the buffer after writing it.
.SS "Stat Methods"
.IX Subsection "Stat Methods"
This methods get individual values from a stat call on the file,
directory or handle represented by th IO::All object.
.IP "\(bu" 4
atime
.Sp
Last access time in seconds since the epoch
.IP "\(bu" 4
blksize
.Sp
Preferred block size for file system I/O
.IP "\(bu" 4
blocks
.Sp
Actual number of blocks allocated
.IP "\(bu" 4
ctime
.Sp
Inode change time in seconds since the epoch
.IP "\(bu" 4
device
.Sp
Device number of filesystem
.IP "\(bu" 4
device_id
.Sp
Device identifier for special files only
.IP "\(bu" 4
gid
.Sp
Numeric group id of file's owner
.IP "\(bu" 4
inode
.Sp
Inode number
.IP "\(bu" 4
modes
.Sp
File mode \- type and permissions
.IP "\(bu" 4
mtime
.Sp
Last modify time in seconds since the epoch
.IP "\(bu" 4
nlink
.Sp
Number of hard links to the file
.IP "\(bu" 4
size
.Sp
Total size of file in bytes
.IP "\(bu" 4
uid
.Sp
Numeric user id of file's owner
.SS "File::Spec Methods"
.IX Subsection "File::Spec Methods"
These methods are all adaptations from File::Spec. Each method
actually does call the matching File::Spec method, but the arguments
and return values differ slightly. Instead of being file and directory
\&\fBnames\fR, they are IO::All \fBobjects\fR. Since IO::All objects stringify
to their names, you can generally use the methods just like File::Spec.
.IP "\(bu" 4
abs2rel
.Sp
Returns the relative path for the absolute path in the IO::All object.
Can take an optional argument indicating the base path.
.IP "\(bu" 4
canonpath
.Sp
Returns the canonical path for the IO::All object.
.IP "\(bu" 4
case_tolerant
.Sp
Returns 0 or 1 indicating whether the file system is case tolerant.
Since an active IO::All object is not needed for this function, you can
code it like:
.Sp
.Vb 1
\&    IO::All\->case_tolerant;
.Ve
.Sp
or more simply:
.Sp
.Vb 1
\&    io\->case_tolerant;
.Ve
.IP "\(bu" 4
catdir
.Sp
Concatenate the directory components together, and return a new IO::All
object representing the resulting directory.
.IP "\(bu" 4
catfile
.Sp
Concatenate the directory and file components together, and return a new
IO::All object representing the resulting file.
.Sp
.Vb 1
\&    my $contents = io\->catfile(qw(dir subdir file))\->slurp;
.Ve
.Sp
This is a very portable way to read \f(CW\*(C`dir/subdir/file\*(C'\fR.
.IP "\(bu" 4
catpath
.Sp
Concatenate the volume, directory and file components together, and
return a new IO::All object representing the resulting file.
.IP "\(bu" 4
curdir
.Sp
Returns an IO::All object representing the current directory.
.IP "\(bu" 4
devnull
.Sp
Returns an IO::All object representing the /dev/null file.
.IP "\(bu" 4
is_absolute
.Sp
Returns 0 or 1 indicating whether the \f(CW\*(C`name\*(C'\fR field of the IO::All object is
an absolute path.
.IP "\(bu" 4
join
.Sp
Same as \f(CW\*(C`catfile\*(C'\fR.
.IP "\(bu" 4
path
.Sp
Returns a list of IO::All directory objects for each directory in your path.
.IP "\(bu" 4
rel2abs
.Sp
Returns the absolute path for the relative path in the IO::All object. Can
take an optional argument indicating the base path.
.IP "\(bu" 4
rootdir
.Sp
Returns an IO::All object representing the root directory on your
file system.
.IP "\(bu" 4
splitdir
.Sp
Returns a list of the directory components of a path in an IO::All object.
.IP "\(bu" 4
splitpath
.Sp
Returns a volume directory and file component of a path in an IO::All object.
.IP "\(bu" 4
tmpdir
.Sp
Returns an IO::All object representing a temporary directory on your
file system.
.IP "\(bu" 4
updir
.Sp
Returns an IO::All object representing the current parent directory.
.SH "OPERATIONAL NOTES"
.IX Header "OPERATIONAL NOTES"
.IP "\(bu" 4
Each IO::All object gets reblessed into an IO::All::* object as soon as
IO::All can determine what type of object it should be. Sometimes it gets
reblessed more than once:
.Sp
.Vb 3
\&    my $io = io(\*(Aqmydbm.db\*(Aq);
\&    $io\->dbm(\*(AqDB_File\*(Aq);
\&    $io\->{foo} = \*(Aqbar\*(Aq;
.Ve
.Sp
In the first statement, \f(CW$io\fR has a reference value of 'IO::All::File', if
\&\f(CW\*(C`mydbm.db\*(C'\fR exists. In the second statement, the object is reblessed into
class 'IO::All::DBM'.
.IP "\(bu" 4
An IO::All object will automatically be opened as soon as there is
enough contextual information to know what type of object it is, and
what mode it should be opened for. This is usually when the first read
or write operation is invoked but might be sooner.
.IP "\(bu" 4
The mode for an object to be opened with is determined heuristically
unless specified explicitly.
.IP "\(bu" 4
For input, IO::All objects will automatically be closed after \s-1EOF\s0 (or
\&\s-1EOD\s0). For output, the object closes when it goes out of scope.
.Sp
To keep input objects from closing at \s-1EOF\s0, do this:
.Sp
.Vb 1
\&    $io\->autoclose(0);
.Ve
.IP "\(bu" 4
You can always call \f(CW\*(C`open\*(C'\fR and \f(CW\*(C`close\*(C'\fR explicitly, if you need that
level of control. To test if an object is currently open, use the
\&\f(CW\*(C`is_open\*(C'\fR method.
.IP "\(bu" 4
Overloaded operations return the target object, if one exists.
.Sp
This would set \f(CW$xxx\fR to the IO::All object:
.Sp
.Vb 1
\&    my $xxx = $contents > io(\*(Aqfile.txt\*(Aq);
.Ve
.Sp
While this would set \f(CW$xxx\fR to the content string:
.Sp
.Vb 1
\&    my $xxx = $contents < io(\*(Aqfile.txt\*(Aq);
.Ve
.SH "STABILITY"
.IX Header "STABILITY"
The goal of the IO::All project is to continually refine the module
to be as simple and consistent to use as possible. Therefore, in the
early stages of the project, I will not hesitate to break backwards
compatibility with other versions of IO::All if I can find an easier
and clearer way to do a particular thing.
.PP
\&\s-1IO\s0 is tricky stuff. There is definitely more work to be done. On the
other hand, this module relies heavily on very stable existing \s-1IO\s0
modules; so it may work fairly well.
.PP
I am sure you will find many unexpected \*(L"features\*(R". Please send all
problems, ideas and suggestions to ingy@cpan.org.
.SS "Known Bugs and Deficiencies"
.IX Subsection "Known Bugs and Deficiencies"
Not all possible combinations of objects and methods have been tested.
There are many many combinations. All of the examples have been tested.
If you find a bug with a particular combination of calls, let me know.
.PP
If you call a method that does not make sense for a particular object,
the result probably won't make sense. Little attempt is made to check
for improper usage.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
IO::Handle, IO::File, IO::Dir, IO::Socket, IO::String, File::Spec,
File::Path, File::ReadBackwards, Tie::File
.SH "CREDITS"
.IX Header "CREDITS"
A lot of people have sent in suggestions, that have become a part of
IO::All. Thank you.
.PP
Special thanks to Ian Langworth for continued testing and patching.
.PP
Thank you Simon Cozens for tipping me off to the overloading possibilities.
.PP
Finally, thanks to Autrijus Tang, for always having one more good idea.
.PP
(It seems IO::All of it to a lot of people!)
.SH "AUTHOR"
.IX Header "AUTHOR"
Ingy do\*:t Net <ingy@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2004. Brian Ingerson.
.PP
Copyright (c) 2006, 2008. Ingy do\*:t Net.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
